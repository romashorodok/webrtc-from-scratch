class Certificate:
    def __init__(self) -> None: ...
    def certificate_fingerprint(self) -> str: ...

class DTLS:
    def __init__(
        self, client: bool, certificate: Certificate, threads: int = 4
    ) -> None: ...
    def do_handshake(self) -> None: ...
    async def enqueue_record(self, record: bytes): ...
    async def dequeue_record(self) -> bytes: ...
    async def handshake_success(self) -> None:
        """
        Mutex Guarded must be used after the do_handshake fn
        """
    ...

class Stream:
    def __init__(self) -> None: ...
    async def recv(self) -> bytes: ...

class SRTP:
    def __init__(self, is_rtp: bool, client: bool, dtls: DTLS) -> None: ...
    async def write_pkt(self, pkt: bytes): ...
    async def read_pkt(self) -> bytes: ...
    async def ssrc_stream(self, ssrc: int) -> Stream: ...
    async def encrypt(self, pkt: bytes): ...
