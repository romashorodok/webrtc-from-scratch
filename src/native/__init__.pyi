class CipherSuiteAes128GcmSha256:
    def __init__(self) -> None: ...
    def init(
        self,
        prf_master_secret: bytes,
        client_random: bytes,
        server_random: bytes,
        is_client: bool,
    ): ...
    def encrypt(self, raw: bytes) -> bytes: ...
    def decrypt(self, ciphertext: bytes) -> bytes: ...

class Keypair:
    def __init__(self, curve: int): ...
    def pubkey_der(self) -> bytes: ...
    def generate_server_signature(
        self, client_random: bytes, server_random: bytes
    ) -> bytes: ...
    def certificate_der(self) -> bytes: ...
    def certificate_fingerprint(self) -> str: ...
    def curve_id(self) -> int: ...

def generate_aead_additional_data(
    sequence_number: bytes,
    epoch: bytes,
    content_type: int,
    protocol_version_major: int,
    protocol_version_minor: int,
    payload_len: int,
) -> bytes: ...
def prf_pre_master_secret(client_public_key: bytes, keypair: Keypair) -> bytes: ...
def prf_master_secret(
    pre_master_secret: bytes, client_random: bytes, server_random: bytes
) -> bytes: ...
def prf_verify_data_server(
    prf_master_secret: bytes, handshake_bodies: bytes
) -> bytes: ...
